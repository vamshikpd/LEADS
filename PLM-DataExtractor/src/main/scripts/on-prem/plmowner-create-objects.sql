-------------------------------------------------------------------------- 
-- Script Name - cpowner-create-objects.sql
-- Purpose 
-- This script creates objects required by the ENDECA DATA EXTRACT PROCESS
-- History
-- 11/18/2009 - Tushar Dalal - Initial version
-- 02/10/2010 - Madhu Menon  - Added USER_SEARCH table and Constraint
-- 02/11/2010 - Madhu Menon  - Updated GetGroupCode function
-- 02/16/2010 - Madhu Menon  - Removed DATA_EXTRACT prefix from all Table, View names
-- 12/07/2011 - Madhu Menon  - Added GETCOLLRCOUNTYNAME function in CPOWNER schema
-- 09/15/2014 - Vamshi Kapidi - Added New Criteria in CPOWNER.PLM_PAROLEE_VIEW 
-- 12/04/2014 - Vamshi Kapidi - Updated Criteria in CPOWNER.PLM_PC290_INFO_VIEW 
-- 8/04/2017 - Vamshi Kapidi - Added New Criteria in CPOWNER.PLM_SMT_VIEW 
-------------------------------------------------------------------------- 

PROMPT =========================================================================
PROMPT TABLE DEFINITIONS
PROMPT =========================================================================

PROMPT CREATE TABLE CPOWNER.DATA_EXTRACT_STATUS
CREATE TABLE CPOWNER.DATA_EXTRACT_STATUS (
	ID NUMBER NOT NULL,
	PROCESS_ID NUMBER NOT NULL,
	PROCESS_NAME VARCHAR2(30) NOT NULL,
	FILE_NAME VARCHAR2(50) NOT NULL,
	DATA_EXTRACT_UPTO_DATE DATE NOT NULL,
	PROCESS_START_DATE DATE NOT NULL,
	PROCESS_END_DATE DATE NULL,
	STATUS VARCHAR2(10) NOT NULL,
	MESSAGE VARCHAR2(900)
);

PROMPT CREATE TABLE CPOWNER.USER_SEARCH
CREATE TABLE CPOWNER.USER_SEARCH (
  SEARCH_ID     NUMBER          NOT NULL,
  SEARCH_NAME   VARCHAR2(30)    NOT NULL,
  USERNAME      VARCHAR2(30)    NOT NULL,
  QUERY         VARCHAR2(500)   NOT NULL
)
 TABLESPACE SEARCH
 PCTFREE    10
/ 

PROMPT CREATE TABLE CPOWNER.PLM_CDC
CREATE TABLE CPOWNER.PLM_CDC (
  cdc_num              	VARCHAR2(6)  NOT NULL,
  last_chg_date    		DATE         NULL
);

PROMPT =========================================================================
PROMPT INDEXES, CONSTRAINTS AND SEQUENCES
PROMPT =========================================================================

PROMPT CREATE INDEX CPOWNER.PLM_CDC_NUM_idx
CREATE UNIQUE INDEX CPOWNER.PLM_CDC_NUM_idx
ON CPOWNER.PLM_CDC (cdc_num);

PROMPT ALTER TABLE USER_SEARCH ADD PRIMARY KEY
ALTER TABLE CPOWNER.USER_SEARCH
  ADD CONSTRAINT USER_SEARCH_PK PRIMARY KEY (SEARCH_ID)
/

PROMPT CREATE SEQUENCE CPOWNER.SEARCH_SEQ
CREATE SEQUENCE CPOWNER.SEARCH_SEQ
  MINVALUE 1
  MAXVALUE 999999999999999999999999999
  INCREMENT BY 1
  NOCYCLE
  ORDER
  CACHE 20
/

CREATE SEQUENCE CPOWNER.DATA_EXTRACT_SEQ
MINVALUE 1
MAXVALUE 99999999
INCREMENT BY 1
NOCYCLE
NOORDER
NOCACHE
/

CREATE SEQUENCE CPOWNER.DATA_EXTRACT_PROCESS_ID_SEQ
MINVALUE 1
MAXVALUE 99999999
INCREMENT BY 1
NOCYCLE
NOORDER
NOCACHE
/

PROMPT =========================================================================
PROMPT VIEW DEFINITIONS
PROMPT =========================================================================

CREATE OR REPLACE VIEW CPOWNER.PLM_SMT_VIEW (
  CDC_NUM,
  SMT_CODE,
  SMT_DESC,
  SMT_PICTURE,
  SMT_TEXT,
  CREATED_DATE,
  LAST_CHG_DATE
) AS
SELECT 
	PLM.CDC_NUM, 
	S.SMT_CODE, 
	T.SMT_DESC,
	S.SMT_PICTURE, 
	S.SMT_TEXT, 
	S.CREATED_DATE, 
	--S.LAST_CHG_DATE
	CASE
		WHEN S.LAST_CHG_DATE IS NULL
		THEN S.CREATED_DATE
		ELSE S.LAST_CHG_DATE
	END AS "LAST_CHG_DATE"
FROM 
	CPOWNER.SMT S, 
	CPOWNER.SMT_TYPE T, 
	CPOWNER.PLM_CDC PLM
WHERE 
	S.SMT_CODE = T.SMT_CODE 
	AND S.CDC_NUM = PLM.CDC_NUM
	AND S.SMT_TEXT != '\'
UNION
SELECT 
	I.CDC_NUM AS CDC_NUM, 
	I.SUBTYPE AS SMT_CODE, 
	I.SUBTYPE AS SMT_DESC,
	'PCW' AS SMT_PICTURE, 
	I.DESCR AS SMT_TEXT, 
	INSERT_DATE AS CREATED_DATE, 
	--UPDATE_DATE AS LAST_CHG_DATE
	CASE
		WHEN UPDATE_DATE IS NULL
		THEN INSERT_DATE
		ELSE UPDATE_DATE
	END AS "LAST_CHG_DATE"
FROM 
	CPOWNER.IMAGE_INFO I, 
	CPOWNER.PLM_CDC PLM
WHERE 
	I.TYPE = 2 
	AND I.CDC_NUM = PLM.CDC_NUM;

CREATE OR REPLACE VIEW CPOWNER.PLM_PAROLEE_VIEW (
  CDC_NUM,
  UNIT_CODE,
  REVOC_RELS_DATE,
  PAROLE_DATE,
  DISCHARGED_DATE,
  PC_290_REQ,
  CLASSIFICATION_CODE,
  STATUS_CODE,
  LAST_CHG_DATE
) AS
SELECT
	P.CDC_NUM,
	P.UNIT_CODE,
	P.REVOC_RELS_DATE,
	P.PAROLE_DATE,
  	P.DISCHARGED_DATE,
  	P.PC_290_REQ,
	P.CLASSIFICATION_CODE,
  	P.STATUS_CODE,
  	P.LAST_CHG_DATE
FROM 
	CPOWNER.PAROLEE P
WHERE 
	P.CDC_NUM NOT BETWEEN 'I30000' AND 'I99999'
	AND SUBSTR(P.CDC_NUM,1,1) IN ('A','B','C','D','E','F','G','H','I','J','K','N','P','R','T','X','W','V')
	AND P.UNIT_CODE NOT IN ('DAI-PRCS')
	AND (P.STATUS_CODE IN ('55','60','65')
		OR (	DISCHARGED_DATE is not null
			and ((P.STATUS_CODE = '70' AND P.DISCHARGED_DATE > SYSDATE - 366)
      		or 
      			((P.STATUS_CODE = '70' AND P.DISCHARGED_DATE >SYSDATE-732) AND P.UNIT_CODE LIKE '%NRP%')
			or 
				((P.STATUS_CODE = '70' AND P.DISCHARGED_DATE >SYSDATE-1098) AND P.CLASSIFICATION_CODE ='DP')
				)
			)
		OR (P.STATUS_CODE = '70' AND P.UNIT_CODE LIKE 'INS%'  AND P.DISCHARGED_DATE > SYSDATE-1098)
		OR (	P.STATUS_CODE = '10' AND NVL(P.PAROLE_DATE,SYSDATE) < SYSDATE+120	)
	);
	
CREATE OR REPLACE VIEW CPOWNER.PLM_CDC_ADDR_PC290_VIEW AS 
	SELECT
		A.CDC_NUM,
		A.ADDRESS_EFF_DATE,
		A.LAST_CHG_DATE,
		A.CITY_NAME,
		C.COUNTY_NAME	
	FROM
		CPOWNER.PLM_CDC PLM,
		CPOWNER.ADDRESS A, 
		CPOWNER.COUNTY C,
		(
			SELECT
				CDC_NUM,
				MAX(ADDRESS_EFF_DATE) AS LATEST_ADDRESS_EFF_DATE
			FROM
				CPOWNER.ADDRESS
			GROUP BY
				CDC_NUM
		) B
	WHERE
		A.CDC_NUM = PLM.CDC_NUM
		AND A.CDC_NUM = B.CDC_NUM
		AND A.ADDRESS_EFF_DATE = B.LATEST_ADDRESS_EFF_DATE
		AND A.COUNTY_CODE = C.COUNTY_CODE(+);

CREATE OR REPLACE VIEW CPOWNER.PLM_PC290_INFO_VIEW AS 
SELECT
	DISTINCT(P.CDC_NUM),
	CASE
		WHEN P.REVOC_RELS_DATE IS NULL THEN P.PAROLE_DATE
		WHEN P.PAROLE_DATE <= P.REVOC_RELS_DATE THEN P.REVOC_RELS_DATE
		ELSE P.PAROLE_DATE
	END AS "ACTION_DATE",
	'R' AS "ACTION_TYPE",
	CASE
                WHEN A.LAST_CHG_DATE >SYSDATE-15 THEN A.LAST_CHG_DATE
                ELSE NULL
        END AS "ADD_CHANGED_DATE"
FROM
	CPOWNER.PLM_PAROLEE_VIEW P,
	CPOWNER.PLM_CDC_ADDR_PC290_VIEW A
WHERE
	P.PC_290_REQ = 'Y'
	AND P.CLASSIFICATION_CODE NOT IN ('DP','PD')
	AND NVL(P.REVOC_RELS_DATE, P.PAROLE_DATE) BETWEEN SYSDATE - 16 AND SYSDATE + 60
	AND P.CDC_NUM = A.CDC_NUM(+)
UNION
SELECT
	DISTINCT(P.CDC_NUM),
	CASE
		WHEN P.REVOC_RELS_DATE IS NULL THEN P.PAROLE_DATE
		WHEN P.PAROLE_DATE <= P.REVOC_RELS_DATE THEN P.REVOC_RELS_DATE
		ELSE P.PAROLE_DATE
	END AS "ACTION_DATE",
	'R' AS "ACTION_TYPE",
	CASE
		WHEN A.ADDRESS_EFF_DATE >= A.LAST_CHG_DATE THEN A.ADDRESS_EFF_DATE
		ELSE A.LAST_CHG_DATE
        END AS "ADD_CHANGED_DATE" 
FROM
	CPOWNER.PLM_PAROLEE_VIEW P,
	CPOWNER.PLM_CDC_ADDR_PC290_VIEW A
WHERE	
	P.PC_290_REQ = 'Y'
	AND P.CLASSIFICATION_CODE NOT IN ('DP','PD')
	AND GREATEST(A.ADDRESS_EFF_DATE,A.LAST_CHG_DATE) BETWEEN SYSDATE - 16 AND SYSDATE
	AND A.CDC_NUM = P.CDC_NUM
UNION
SELECT 
	DISTINCT(P.CDC_NUM), 
	CASE
	  WHEN P.CONTROL_DISCHRG_DATE IS NULL THEN P.DISCHARGED_DATE
	  WHEN P.DISCHARGED_DATE IS NULL THEN P.CONTROL_DISCHRG_DATE
	  WHEN P.DISCHARGED_DATE <= P.CONTROL_DISCHRG_DATE THEN P.DISCHARGED_DATE
	  ELSE P.CONTROL_DISCHRG_DATE
	END AS "ACTION_DATE",
	'D' AS "ACTION_TYPE",
  	NULL AS "ADD_CHANGED_DATE"
FROM 
	CPOWNER.PAROLEE P
WHERE 
(
	CASE
		WHEN P.CONTROL_DISCHRG_DATE IS NULL THEN P.DISCHARGED_DATE
		WHEN P.DISCHARGED_DATE IS NULL THEN P.CONTROL_DISCHRG_DATE
		WHEN P.DISCHARGED_DATE <= P.CONTROL_DISCHRG_DATE THEN P.DISCHARGED_DATE
	ELSE 
		P.CONTROL_DISCHRG_DATE 
	END
) BETWEEN SYSDATE - 16 AND SYSDATE + 60
	AND P.PC_290_REQ = 'Y'
	AND P.STATUS_CODE IN ('50','65','70')
	AND P.CLASSIFICATION_CODE NOT IN ('DP','PD');


PROMPT =========================================================================
PROMPT PROCEDURES AND FUNCTIONS DEFINITIONS
PROMPT =========================================================================

CREATE OR REPLACE PROCEDURE CPOWNER.COLLECT_FULL_PAROLEE
AS
BEGIN
	EXECUTE IMMEDIATE 'TRUNCATE TABLE CPOWNER.PLM_CDC';
	COMMIT;
	INSERT INTO CPOWNER.PLM_CDC (
	  SELECT CDC_NUM, MAX(LAST_CHG_DATE) AS LAST_CHG_DATE FROM (
		SELECT CDC_NUM, LAST_CHG_DATE FROM CPOWNER.PLM_PAROLEE_VIEW
		UNION
		SELECT A.CDC_NUM, MAX(B.LAST_CHG_DATE) AS LAST_CHG_DATE FROM CPOWNER.PLM_PAROLEE_VIEW A, CPOWNER.ADDRESS B WHERE B.CDC_NUM=A.CDC_NUM GROUP BY A.CDC_NUM
		UNION
		SELECT A.CDC_NUM, MAX(B.LAST_CHG_DATE) AS LAST_CHG_DATE FROM CPOWNER.PLM_PAROLEE_VIEW A, CPOWNER.ALIAS B WHERE B.CDC_NUM=A.CDC_NUM GROUP BY A.CDC_NUM
		UNION
		SELECT A.CDC_NUM, MAX(B.LAST_CHG_DATE) AS LAST_CHG_DATE FROM CPOWNER.PLM_PAROLEE_VIEW A, CPOWNER.JOB B WHERE B.CDC_NUM=A.CDC_NUM GROUP BY A.CDC_NUM
		UNION
		SELECT A.CDC_NUM, MAX(B.LAST_CHG_DATE) AS LAST_CHG_DATE FROM CPOWNER.PLM_PAROLEE_VIEW A, CPOWNER.MONIKER B WHERE B.CDC_NUM=A.CDC_NUM GROUP BY A.CDC_NUM
		UNION
		SELECT A.CDC_NUM, MAX(B.LAST_CHG_DATE) AS LAST_CHG_DATE FROM CPOWNER.PLM_PAROLEE_VIEW A, CPOWNER.OFFENSE B WHERE B.CDC_NUM=A.CDC_NUM GROUP BY A.CDC_NUM
		UNION
		SELECT A.CDC_NUM, MAX(B.LAST_CHG_DATE) AS LAST_CHG_DATE FROM CPOWNER.PLM_PAROLEE_VIEW A, CPOWNER.PROBLEM_AREA B WHERE B.CDC_NUM=A.CDC_NUM GROUP BY A.CDC_NUM
		UNION
      	SELECT A.CDC_NUM, MAX(Greatest(Nvl(B.CREATED_DATE,to_date('01/01/1990', 'MM/DD/YYYY')), Nvl(B.LAST_CHG_DATE,to_date('01/01/1990', 'MM/DD/YYYY')))) AS LAST_CHG_DATE FROM CPOWNER.PLM_PAROLEE_VIEW A, CPOWNER.SMT B          WHERE B.CDC_NUM=A.CDC_NUM GROUP BY A.CDC_NUM
      	UNION
      	SELECT A.CDC_NUM, MAX(Greatest(Nvl(B.INSERT_DATE ,to_date('01/01/1990', 'MM/DD/YYYY')), Nvl(B.UPDATE_DATE  ,to_date('01/01/1990', 'MM/DD/YYYY')))) AS LAST_CHG_DATE FROM CPOWNER.PLM_PAROLEE_VIEW A, CPOWNER.IMAGE_INFO B  WHERE B.CDC_NUM=A.CDC_NUM GROUP BY A.CDC_NUM
		UNION
		SELECT A.CDC_NUM, MAX(B.LAST_CHG_DATE) AS LAST_CHG_DATE FROM CPOWNER.PLM_PAROLEE_VIEW A, CPOWNER.SPECIAL_CONDITION B WHERE B.CDC_NUM=A.CDC_NUM GROUP BY A.CDC_NUM
		UNION
		SELECT A.CDC_NUM, MAX(B.LAST_CHG_DATE) AS LAST_CHG_DATE FROM CPOWNER.PLM_PAROLEE_VIEW A, CPOWNER.VEHICLE B WHERE B.CDC_NUM=A.CDC_NUM GROUP BY A.CDC_NUM
	  ) GROUP BY CDC_NUM
	);
	COMMIT;
END;

CREATE OR REPLACE FUNCTION GETGROUPCODE(UNIT VARCHAR2)
RETURN VARCHAR2
IS
   L_STMT LONG;
   CURSOR C1
   IS
   SELECT AB3_GROUP AS GROUP_CODE FROM CPOWNER.AB3_UNIT WHERE AB3_UNIT_CODE = UNIT ORDER BY 1;
BEGIN
    L_STMT := ' ';
    FOR REC IN C1 LOOP
      IF L_STMT = ' ' THEN
        L_STMT := ''|| REC.GROUP_CODE;
      ELSE
        L_STMT := L_STMT || ',' || REC.GROUP_CODE;
      END IF;
    END LOOP;
    RETURN L_STMT;
END GETGROUPCODE;

PROMPT CREATE OR REPLACE PROCEDURE LOG_PC290
CREATE OR REPLACE PROCEDURE LOG_PC290
(COUNTY IN VARCHAR2, CITY IN VARCHAR2, USERNAME IN VARCHAR2, IP_ADDRESS IN VARCHAR2, QRY_TYPE IN VARCHAR2)
IS
	CORI_QUERY_RESULTS_STMT VARCHAR2(500);
	ID_SEQ NUMBER;
	TYPE CUR_TYP IS REF CURSOR;
	C CUR_TYP;
	CDCNUM VARCHAR2(6);
BEGIN
	SELECT CORI_QUERY_ID_SEQ.NEXTVAL INTO ID_SEQ FROM DUAL;

	IF QRY_TYPE = 'D' THEN
		INSERT INTO CORI_QUERY VALUES (ID_SEQ,USERNAME,IP_ADDRESS,SYSDATE,'PC290_DISCHARGE_REPORT','PC290_DISCHARGE_REPORT','290J');
	ELSE
		INSERT INTO CORI_QUERY VALUES (ID_SEQ,USERNAME,IP_ADDRESS,SYSDATE,'PC290_REPORT','PC290_REPORT','290');
	END IF;

	IF QRY_TYPE ='R' THEN
		CORI_QUERY_RESULTS_STMT := 'SELECT A.CDC_NUM FROM PLM_CDC_ADDR_PC290_VIEW A, CPOWNER.PLM_PC290_INFO_VIEW B, PAROLEE P WHERE P.LAST_CHG_DATE < (SELECT PROCESS_START_DATE FROM CPOWNER.DATA_EXTRACT_STATUS WHERE ID = (SELECT MAX(ID) FROM CPOWNER.DATA_EXTRACT_STATUS WHERE STATUS=' || '''' || 'SUCCESS' || '''' || ')) AND (B.ACTION_TYPE= ' || ''''|| QRY_TYPE || '''' || ' OR B.ADD_CHANGED_DATE IS NOT NULL) AND A.CDC_NUM=B.CDC_NUM AND P.CDC_NUM=B.CDC_NUM';
	ELSE                                                                                                                                                                                                                                                                                                                                                     
		CORI_QUERY_RESULTS_STMT := 'SELECT A.CDC_NUM FROM PLM_CDC_ADDR_PC290_VIEW A, CPOWNER.PLM_PC290_INFO_VIEW B, PAROLEE P WHERE P.LAST_CHG_DATE < (SELECT PROCESS_START_DATE FROM CPOWNER.DATA_EXTRACT_STATUS WHERE ID = (SELECT MAX(ID) FROM CPOWNER.DATA_EXTRACT_STATUS WHERE STATUS=' || '''' || 'SUCCESS' || '''' || ')) AND B.ACTION_TYPE= ' || '''' || QRY_TYPE || '''' || ' AND A.CDC_NUM=B.CDC_NUM AND P.CDC_NUM=B.CDC_NUM';
	END IF;

	IF CITY != '' THEN
		CORI_QUERY_RESULTS_STMT := CORI_QUERY_RESULTS_STMT || ' AND A.COUNTY_NAME=' || ''''|| COUNTY || '''' || ' AND A.CITY_NAME= ' || '''' || CITY || ''''; 
	ELSE 
		CORI_QUERY_RESULTS_STMT := CORI_QUERY_RESULTS_STMT || ' AND A.COUNTY_NAME=' || ''''|| COUNTY || '''';
	END IF;   

	OPEN C FOR CORI_QUERY_RESULTS_STMT;
	LOOP
		FETCH C INTO CDCNUM;         
		EXIT WHEN C%NOTFOUND;
		INSERT INTO CORI_QUERY_RESULTS VALUES (ID_SEQ,CDCNUM);
	END LOOP;

	CLOSE C;
	COMMIT;
END;

PROMPT CREATE OR REPLACE FUNCTION CPOWNER.GETCOUNTIESFORUNIT
CREATE OR REPLACE FUNCTION CPOWNER.GETCOUNTIESFORUNIT(UNIT VARCHAR2)
RETURN VARCHAR2
IS
   L_STMT LONG;
   CURSOR C1
   IS
   SELECT COUNTY_CODE FROM CPOWNER.JURISDICTION_CODES WHERE UNIT_CODE=UNIT ORDER BY 1;
BEGIN
    L_STMT := ' ';
    FOR REC IN C1 LOOP
      IF L_STMT = ' ' THEN
        L_STMT := ':'|| REC.COUNTY_CODE;
      ELSE
        L_STMT := L_STMT || ':' || REC.COUNTY_CODE;
      END IF;
    END LOOP;
    L_STMT := L_STMT || ':';
    RETURN L_STMT;
END GETCOUNTIESFORUNIT;

PROMPT CREATE OR REPLACE FUNCTION getcollrcountyname
CREATE OR REPLACE FUNCTION getcollrcountyname(COLLR_CODE VARCHAR2)
RETURN VARCHAR2
IS
   CODE VARCHAR2(6);
   CNAME VARCHAR2(20);
BEGIN
      IF Length(COLLR_CODE) = 5 THEN
        CODE := SubStr(COLLR_CODE,1,2);
      ELSIF Length(COLLR_CODE) = 6 THEN
        CODE := SubStr(COLLR_CODE,1,3);
      ELSE
        CODE := SubStr(COLLR_CODE,1,3);
      END IF;

      SELECT COUNTY_NAME INTO CNAME FROM CPOWNER.COUNTY WHERE COUNTY_CODE = CODE;

    RETURN CNAME;
END;

/


